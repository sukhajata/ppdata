// source: data-service.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.ppdata.DataMsgRequest', null, global);
goog.exportSymbol('proto.ppdata.GeoscanMsgData', null, global);
goog.exportSymbol('proto.ppdata.GeoscanMsgDatum', null, global);
goog.exportSymbol('proto.ppdata.InstMsgData', null, global);
goog.exportSymbol('proto.ppdata.InstMsgDatum', null, global);
goog.exportSymbol('proto.ppdata.PQMsgData', null, global);
goog.exportSymbol('proto.ppdata.PQMsgDatum', null, global);
goog.exportSymbol('proto.ppdata.ProcMsgData', null, global);
goog.exportSymbol('proto.ppdata.ProcMsgDatum', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.DataMsgRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppdata.DataMsgRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.DataMsgRequest.displayName = 'proto.ppdata.DataMsgRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.InstMsgData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ppdata.InstMsgData.repeatedFields_, null);
};
goog.inherits(proto.ppdata.InstMsgData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.InstMsgData.displayName = 'proto.ppdata.InstMsgData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.InstMsgDatum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppdata.InstMsgDatum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.InstMsgDatum.displayName = 'proto.ppdata.InstMsgDatum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.ProcMsgData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ppdata.ProcMsgData.repeatedFields_, null);
};
goog.inherits(proto.ppdata.ProcMsgData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.ProcMsgData.displayName = 'proto.ppdata.ProcMsgData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.ProcMsgDatum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppdata.ProcMsgDatum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.ProcMsgDatum.displayName = 'proto.ppdata.ProcMsgDatum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.PQMsgData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ppdata.PQMsgData.repeatedFields_, null);
};
goog.inherits(proto.ppdata.PQMsgData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.PQMsgData.displayName = 'proto.ppdata.PQMsgData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.PQMsgDatum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppdata.PQMsgDatum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.PQMsgDatum.displayName = 'proto.ppdata.PQMsgDatum';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.GeoscanMsgData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.ppdata.GeoscanMsgData.repeatedFields_, null);
};
goog.inherits(proto.ppdata.GeoscanMsgData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.GeoscanMsgData.displayName = 'proto.ppdata.GeoscanMsgData';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.ppdata.GeoscanMsgDatum = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.ppdata.GeoscanMsgDatum, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.ppdata.GeoscanMsgDatum.displayName = 'proto.ppdata.GeoscanMsgDatum';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.DataMsgRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.DataMsgRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.DataMsgRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.DataMsgRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    starttime: jspb.Message.getFieldWithDefault(msg, 1, ""),
    deviceeui: jspb.Message.getFieldWithDefault(msg, 2, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.DataMsgRequest}
 */
proto.ppdata.DataMsgRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.DataMsgRequest;
  return proto.ppdata.DataMsgRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.DataMsgRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.DataMsgRequest}
 */
proto.ppdata.DataMsgRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setStarttime(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setDeviceeui(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.DataMsgRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.DataMsgRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.DataMsgRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.DataMsgRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getStarttime();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getDeviceeui();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
};


/**
 * optional string startTime = 1;
 * @return {string}
 */
proto.ppdata.DataMsgRequest.prototype.getStarttime = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.DataMsgRequest} returns this
 */
proto.ppdata.DataMsgRequest.prototype.setStarttime = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string deviceEUI = 2;
 * @return {string}
 */
proto.ppdata.DataMsgRequest.prototype.getDeviceeui = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.DataMsgRequest} returns this
 */
proto.ppdata.DataMsgRequest.prototype.setDeviceeui = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ppdata.InstMsgData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.InstMsgData.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.InstMsgData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.InstMsgData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.InstMsgData.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.ppdata.InstMsgDatum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.InstMsgData}
 */
proto.ppdata.InstMsgData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.InstMsgData;
  return proto.ppdata.InstMsgData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.InstMsgData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.InstMsgData}
 */
proto.ppdata.InstMsgData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ppdata.InstMsgDatum;
      reader.readMessage(value,proto.ppdata.InstMsgDatum.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.InstMsgData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.InstMsgData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.InstMsgData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.InstMsgData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ppdata.InstMsgDatum.serializeBinaryToWriter
    );
  }
};


/**
 * repeated InstMsgDatum rows = 1;
 * @return {!Array<!proto.ppdata.InstMsgDatum>}
 */
proto.ppdata.InstMsgData.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.ppdata.InstMsgDatum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ppdata.InstMsgDatum, 1));
};


/**
 * @param {!Array<!proto.ppdata.InstMsgDatum>} value
 * @return {!proto.ppdata.InstMsgData} returns this
*/
proto.ppdata.InstMsgData.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ppdata.InstMsgDatum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ppdata.InstMsgDatum}
 */
proto.ppdata.InstMsgData.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ppdata.InstMsgDatum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ppdata.InstMsgData} returns this
 */
proto.ppdata.InstMsgData.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.InstMsgDatum.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.InstMsgDatum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.InstMsgDatum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.InstMsgDatum.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phase: jspb.Message.getFieldWithDefault(msg, 2, 0),
    activepower: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    reactivepower: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    current: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    voltage: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.InstMsgDatum}
 */
proto.ppdata.InstMsgDatum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.InstMsgDatum;
  return proto.ppdata.InstMsgDatum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.InstMsgDatum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.InstMsgDatum}
 */
proto.ppdata.InstMsgDatum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhase(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setActivepower(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setReactivepower(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrent(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.InstMsgDatum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.InstMsgDatum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.InstMsgDatum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.InstMsgDatum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhase();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getActivepower();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getReactivepower();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getCurrent();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getVoltage();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * optional string timestamp = 1;
 * @return {string}
 */
proto.ppdata.InstMsgDatum.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.InstMsgDatum} returns this
 */
proto.ppdata.InstMsgDatum.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 phase = 2;
 * @return {number}
 */
proto.ppdata.InstMsgDatum.prototype.getPhase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.InstMsgDatum} returns this
 */
proto.ppdata.InstMsgDatum.prototype.setPhase = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float activepower = 3;
 * @return {number}
 */
proto.ppdata.InstMsgDatum.prototype.getActivepower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.InstMsgDatum} returns this
 */
proto.ppdata.InstMsgDatum.prototype.setActivepower = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float reactivepower = 4;
 * @return {number}
 */
proto.ppdata.InstMsgDatum.prototype.getReactivepower = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.InstMsgDatum} returns this
 */
proto.ppdata.InstMsgDatum.prototype.setReactivepower = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float current = 5;
 * @return {number}
 */
proto.ppdata.InstMsgDatum.prototype.getCurrent = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.InstMsgDatum} returns this
 */
proto.ppdata.InstMsgDatum.prototype.setCurrent = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float voltage = 6;
 * @return {number}
 */
proto.ppdata.InstMsgDatum.prototype.getVoltage = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.InstMsgDatum} returns this
 */
proto.ppdata.InstMsgDatum.prototype.setVoltage = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ppdata.ProcMsgData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.ProcMsgData.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.ProcMsgData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.ProcMsgData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.ProcMsgData.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.ppdata.ProcMsgDatum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.ProcMsgData}
 */
proto.ppdata.ProcMsgData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.ProcMsgData;
  return proto.ppdata.ProcMsgData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.ProcMsgData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.ProcMsgData}
 */
proto.ppdata.ProcMsgData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ppdata.ProcMsgDatum;
      reader.readMessage(value,proto.ppdata.ProcMsgDatum.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.ProcMsgData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.ProcMsgData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.ProcMsgData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.ProcMsgData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ppdata.ProcMsgDatum.serializeBinaryToWriter
    );
  }
};


/**
 * repeated ProcMsgDatum rows = 1;
 * @return {!Array<!proto.ppdata.ProcMsgDatum>}
 */
proto.ppdata.ProcMsgData.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.ppdata.ProcMsgDatum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ppdata.ProcMsgDatum, 1));
};


/**
 * @param {!Array<!proto.ppdata.ProcMsgDatum>} value
 * @return {!proto.ppdata.ProcMsgData} returns this
*/
proto.ppdata.ProcMsgData.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ppdata.ProcMsgDatum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ppdata.ProcMsgDatum}
 */
proto.ppdata.ProcMsgData.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ppdata.ProcMsgDatum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ppdata.ProcMsgData} returns this
 */
proto.ppdata.ProcMsgData.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.ProcMsgDatum.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.ProcMsgDatum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.ProcMsgDatum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.ProcMsgDatum.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phase: jspb.Message.getFieldWithDefault(msg, 2, 0),
    loopimpedance: jspb.Message.getFieldWithDefault(msg, 3, 0),
    rssi: jspb.Message.getFieldWithDefault(msg, 4, 0),
    snr: jspb.Message.getFieldWithDefault(msg, 5, 0),
    alivecnt: jspb.Message.getFieldWithDefault(msg, 6, 0),
    saifi: jspb.Message.getFieldWithDefault(msg, 7, 0),
    memfree: jspb.Message.getFieldWithDefault(msg, 8, 0),
    tempcnt: jspb.Message.getFieldWithDefault(msg, 9, 0),
    sustainedcnt: jspb.Message.getFieldWithDefault(msg, 10, 0),
    prolongedcnt: jspb.Message.getFieldWithDefault(msg, 11, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.ProcMsgDatum}
 */
proto.ppdata.ProcMsgDatum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.ProcMsgDatum;
  return proto.ppdata.ProcMsgDatum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.ProcMsgDatum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.ProcMsgDatum}
 */
proto.ppdata.ProcMsgDatum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhase(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setLoopimpedance(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setRssi(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSnr(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setAlivecnt(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSaifi(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMemfree(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTempcnt(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSustainedcnt(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProlongedcnt(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.ProcMsgDatum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.ProcMsgDatum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.ProcMsgDatum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.ProcMsgDatum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhase();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getLoopimpedance();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = message.getRssi();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getSnr();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getAlivecnt();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getSaifi();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getMemfree();
  if (f !== 0) {
    writer.writeInt32(
      8,
      f
    );
  }
  f = message.getTempcnt();
  if (f !== 0) {
    writer.writeInt32(
      9,
      f
    );
  }
  f = message.getSustainedcnt();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getProlongedcnt();
  if (f !== 0) {
    writer.writeInt32(
      11,
      f
    );
  }
};


/**
 * optional string timestamp = 1;
 * @return {string}
 */
proto.ppdata.ProcMsgDatum.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 phase = 2;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getPhase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setPhase = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional int32 loopimpedance = 3;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getLoopimpedance = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setLoopimpedance = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional int32 rssi = 4;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getRssi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setRssi = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 snr = 5;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getSnr = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setSnr = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional int32 alivecnt = 6;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getAlivecnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setAlivecnt = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 saifi = 7;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getSaifi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setSaifi = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional int32 memfree = 8;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getMemfree = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setMemfree = function(value) {
  return jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional int32 tempcnt = 9;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getTempcnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 9, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setTempcnt = function(value) {
  return jspb.Message.setProto3IntField(this, 9, value);
};


/**
 * optional int32 sustainedcnt = 10;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getSustainedcnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setSustainedcnt = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional int32 prolongedcnt = 11;
 * @return {number}
 */
proto.ppdata.ProcMsgDatum.prototype.getProlongedcnt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 11, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.ProcMsgDatum} returns this
 */
proto.ppdata.ProcMsgDatum.prototype.setProlongedcnt = function(value) {
  return jspb.Message.setProto3IntField(this, 11, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ppdata.PQMsgData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.PQMsgData.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.PQMsgData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.PQMsgData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.PQMsgData.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.ppdata.PQMsgDatum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.PQMsgData}
 */
proto.ppdata.PQMsgData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.PQMsgData;
  return proto.ppdata.PQMsgData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.PQMsgData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.PQMsgData}
 */
proto.ppdata.PQMsgData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ppdata.PQMsgDatum;
      reader.readMessage(value,proto.ppdata.PQMsgDatum.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.PQMsgData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.PQMsgData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.PQMsgData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.PQMsgData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ppdata.PQMsgDatum.serializeBinaryToWriter
    );
  }
};


/**
 * repeated PQMsgDatum rows = 1;
 * @return {!Array<!proto.ppdata.PQMsgDatum>}
 */
proto.ppdata.PQMsgData.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.ppdata.PQMsgDatum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ppdata.PQMsgDatum, 1));
};


/**
 * @param {!Array<!proto.ppdata.PQMsgDatum>} value
 * @return {!proto.ppdata.PQMsgData} returns this
*/
proto.ppdata.PQMsgData.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ppdata.PQMsgDatum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ppdata.PQMsgDatum}
 */
proto.ppdata.PQMsgData.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ppdata.PQMsgDatum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ppdata.PQMsgData} returns this
 */
proto.ppdata.PQMsgData.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.PQMsgDatum.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.PQMsgDatum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.PQMsgDatum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.PQMsgDatum.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    phase: jspb.Message.getFieldWithDefault(msg, 2, 0),
    voltagemax: jspb.Message.getFloatingPointFieldWithDefault(msg, 3, 0.0),
    currentmax: jspb.Message.getFloatingPointFieldWithDefault(msg, 4, 0.0),
    poweractivemax: jspb.Message.getFloatingPointFieldWithDefault(msg, 5, 0.0),
    powerreactivemax: jspb.Message.getFloatingPointFieldWithDefault(msg, 6, 0.0),
    thdvmax: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
    voltagesma: jspb.Message.getFloatingPointFieldWithDefault(msg, 8, 0.0),
    currentsma: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
    poweractivesma: jspb.Message.getFloatingPointFieldWithDefault(msg, 10, 0.0),
    powerreactivesma: jspb.Message.getFloatingPointFieldWithDefault(msg, 11, 0.0),
    thdvsma: jspb.Message.getFloatingPointFieldWithDefault(msg, 12, 0.0),
    voltagemin: jspb.Message.getFloatingPointFieldWithDefault(msg, 13, 0.0),
    currentmin: jspb.Message.getFloatingPointFieldWithDefault(msg, 14, 0.0),
    poweractivemin: jspb.Message.getFloatingPointFieldWithDefault(msg, 15, 0.0),
    powerreactivemin: jspb.Message.getFloatingPointFieldWithDefault(msg, 16, 0.0),
    thdvmin: jspb.Message.getFloatingPointFieldWithDefault(msg, 17, 0.0),
    momentarysag: jspb.Message.getFieldWithDefault(msg, 18, 0),
    momentaryswell: jspb.Message.getFieldWithDefault(msg, 19, 0),
    temporarysag: jspb.Message.getFieldWithDefault(msg, 20, 0),
    temporaryswell: jspb.Message.getFieldWithDefault(msg, 21, 0),
    sustainedundervoltage: jspb.Message.getFieldWithDefault(msg, 22, 0),
    sustainedovervoltage: jspb.Message.getFieldWithDefault(msg, 23, 0),
    prolongedundervoltage: jspb.Message.getFieldWithDefault(msg, 24, 0),
    prolongedovervoltage: jspb.Message.getFieldWithDefault(msg, 25, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.PQMsgDatum}
 */
proto.ppdata.PQMsgDatum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.PQMsgDatum;
  return proto.ppdata.PQMsgDatum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.PQMsgDatum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.PQMsgDatum}
 */
proto.ppdata.PQMsgDatum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setPhase(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltagemax(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentmax(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoweractivemax(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerreactivemax(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThdvmax(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltagesma(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentsma(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoweractivesma(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerreactivesma(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThdvsma(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setVoltagemin(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setCurrentmin(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPoweractivemin(value);
      break;
    case 16:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPowerreactivemin(value);
      break;
    case 17:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThdvmin(value);
      break;
    case 18:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMomentarysag(value);
      break;
    case 19:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMomentaryswell(value);
      break;
    case 20:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemporarysag(value);
      break;
    case 21:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setTemporaryswell(value);
      break;
    case 22:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSustainedundervoltage(value);
      break;
    case 23:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setSustainedovervoltage(value);
      break;
    case 24:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProlongedundervoltage(value);
      break;
    case 25:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setProlongedovervoltage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.PQMsgDatum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.PQMsgDatum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.PQMsgDatum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.PQMsgDatum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getPhase();
  if (f !== 0) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = message.getVoltagemax();
  if (f !== 0.0) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = message.getCurrentmax();
  if (f !== 0.0) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = message.getPoweractivemax();
  if (f !== 0.0) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = message.getPowerreactivemax();
  if (f !== 0.0) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = message.getThdvmax();
  if (f !== 0.0) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = message.getVoltagesma();
  if (f !== 0.0) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = message.getCurrentsma();
  if (f !== 0.0) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = message.getPoweractivesma();
  if (f !== 0.0) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = message.getPowerreactivesma();
  if (f !== 0.0) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = message.getThdvsma();
  if (f !== 0.0) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = message.getVoltagemin();
  if (f !== 0.0) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = message.getCurrentmin();
  if (f !== 0.0) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = message.getPoweractivemin();
  if (f !== 0.0) {
    writer.writeFloat(
      15,
      f
    );
  }
  f = message.getPowerreactivemin();
  if (f !== 0.0) {
    writer.writeFloat(
      16,
      f
    );
  }
  f = message.getThdvmin();
  if (f !== 0.0) {
    writer.writeFloat(
      17,
      f
    );
  }
  f = message.getMomentarysag();
  if (f !== 0) {
    writer.writeInt32(
      18,
      f
    );
  }
  f = message.getMomentaryswell();
  if (f !== 0) {
    writer.writeInt32(
      19,
      f
    );
  }
  f = message.getTemporarysag();
  if (f !== 0) {
    writer.writeInt32(
      20,
      f
    );
  }
  f = message.getTemporaryswell();
  if (f !== 0) {
    writer.writeInt32(
      21,
      f
    );
  }
  f = message.getSustainedundervoltage();
  if (f !== 0) {
    writer.writeInt32(
      22,
      f
    );
  }
  f = message.getSustainedovervoltage();
  if (f !== 0) {
    writer.writeInt32(
      23,
      f
    );
  }
  f = message.getProlongedundervoltage();
  if (f !== 0) {
    writer.writeInt32(
      24,
      f
    );
  }
  f = message.getProlongedovervoltage();
  if (f !== 0) {
    writer.writeInt32(
      25,
      f
    );
  }
};


/**
 * optional string timestamp = 1;
 * @return {string}
 */
proto.ppdata.PQMsgDatum.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional int32 phase = 2;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPhase = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPhase = function(value) {
  return jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional float voltageMax = 3;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getVoltagemax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 3, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setVoltagemax = function(value) {
  return jspb.Message.setProto3FloatField(this, 3, value);
};


/**
 * optional float currentMax = 4;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getCurrentmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 4, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setCurrentmax = function(value) {
  return jspb.Message.setProto3FloatField(this, 4, value);
};


/**
 * optional float powerActiveMax = 5;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPoweractivemax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 5, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPoweractivemax = function(value) {
  return jspb.Message.setProto3FloatField(this, 5, value);
};


/**
 * optional float powerReactiveMax = 6;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPowerreactivemax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 6, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPowerreactivemax = function(value) {
  return jspb.Message.setProto3FloatField(this, 6, value);
};


/**
 * optional float thdvMax = 7;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getThdvmax = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setThdvmax = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional float voltageSMA = 8;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getVoltagesma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 8, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setVoltagesma = function(value) {
  return jspb.Message.setProto3FloatField(this, 8, value);
};


/**
 * optional float currentSMA = 9;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getCurrentsma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setCurrentsma = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional float powerActiveSMA = 10;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPoweractivesma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 10, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPoweractivesma = function(value) {
  return jspb.Message.setProto3FloatField(this, 10, value);
};


/**
 * optional float powerReactiveSMA = 11;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPowerreactivesma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 11, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPowerreactivesma = function(value) {
  return jspb.Message.setProto3FloatField(this, 11, value);
};


/**
 * optional float thdvSMA = 12;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getThdvsma = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 12, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setThdvsma = function(value) {
  return jspb.Message.setProto3FloatField(this, 12, value);
};


/**
 * optional float voltageMin = 13;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getVoltagemin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 13, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setVoltagemin = function(value) {
  return jspb.Message.setProto3FloatField(this, 13, value);
};


/**
 * optional float currentMin = 14;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getCurrentmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 14, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setCurrentmin = function(value) {
  return jspb.Message.setProto3FloatField(this, 14, value);
};


/**
 * optional float powerActiveMin = 15;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPoweractivemin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 15, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPoweractivemin = function(value) {
  return jspb.Message.setProto3FloatField(this, 15, value);
};


/**
 * optional float powerReactiveMin = 16;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getPowerreactivemin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 16, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setPowerreactivemin = function(value) {
  return jspb.Message.setProto3FloatField(this, 16, value);
};


/**
 * optional float thdvMin = 17;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getThdvmin = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 17, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setThdvmin = function(value) {
  return jspb.Message.setProto3FloatField(this, 17, value);
};


/**
 * optional int32 momentarySag = 18;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getMomentarysag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 18, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setMomentarysag = function(value) {
  return jspb.Message.setProto3IntField(this, 18, value);
};


/**
 * optional int32 momentarySwell = 19;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getMomentaryswell = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 19, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setMomentaryswell = function(value) {
  return jspb.Message.setProto3IntField(this, 19, value);
};


/**
 * optional int32 temporarySag = 20;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getTemporarysag = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 20, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setTemporarysag = function(value) {
  return jspb.Message.setProto3IntField(this, 20, value);
};


/**
 * optional int32 temporarySwell = 21;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getTemporaryswell = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 21, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setTemporaryswell = function(value) {
  return jspb.Message.setProto3IntField(this, 21, value);
};


/**
 * optional int32 sustainedUnderVoltage = 22;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getSustainedundervoltage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 22, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setSustainedundervoltage = function(value) {
  return jspb.Message.setProto3IntField(this, 22, value);
};


/**
 * optional int32 sustainedOverVoltage = 23;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getSustainedovervoltage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 23, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setSustainedovervoltage = function(value) {
  return jspb.Message.setProto3IntField(this, 23, value);
};


/**
 * optional int32 prolongedUnderVoltage = 24;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getProlongedundervoltage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 24, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setProlongedundervoltage = function(value) {
  return jspb.Message.setProto3IntField(this, 24, value);
};


/**
 * optional int32 prolongedOverVoltage = 25;
 * @return {number}
 */
proto.ppdata.PQMsgDatum.prototype.getProlongedovervoltage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 25, 0));
};


/**
 * @param {number} value
 * @return {!proto.ppdata.PQMsgDatum} returns this
 */
proto.ppdata.PQMsgDatum.prototype.setProlongedovervoltage = function(value) {
  return jspb.Message.setProto3IntField(this, 25, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.ppdata.GeoscanMsgData.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.GeoscanMsgData.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.GeoscanMsgData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.GeoscanMsgData} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.GeoscanMsgData.toObject = function(includeInstance, msg) {
  var f, obj = {
    rowsList: jspb.Message.toObjectList(msg.getRowsList(),
    proto.ppdata.GeoscanMsgDatum.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.GeoscanMsgData}
 */
proto.ppdata.GeoscanMsgData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.GeoscanMsgData;
  return proto.ppdata.GeoscanMsgData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.GeoscanMsgData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.GeoscanMsgData}
 */
proto.ppdata.GeoscanMsgData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.ppdata.GeoscanMsgDatum;
      reader.readMessage(value,proto.ppdata.GeoscanMsgDatum.deserializeBinaryFromReader);
      msg.addRows(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.GeoscanMsgData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.GeoscanMsgData.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.GeoscanMsgData} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.GeoscanMsgData.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getRowsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.ppdata.GeoscanMsgDatum.serializeBinaryToWriter
    );
  }
};


/**
 * repeated GeoscanMsgDatum rows = 1;
 * @return {!Array<!proto.ppdata.GeoscanMsgDatum>}
 */
proto.ppdata.GeoscanMsgData.prototype.getRowsList = function() {
  return /** @type{!Array<!proto.ppdata.GeoscanMsgDatum>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.ppdata.GeoscanMsgDatum, 1));
};


/**
 * @param {!Array<!proto.ppdata.GeoscanMsgDatum>} value
 * @return {!proto.ppdata.GeoscanMsgData} returns this
*/
proto.ppdata.GeoscanMsgData.prototype.setRowsList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.ppdata.GeoscanMsgDatum=} opt_value
 * @param {number=} opt_index
 * @return {!proto.ppdata.GeoscanMsgDatum}
 */
proto.ppdata.GeoscanMsgData.prototype.addRows = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.ppdata.GeoscanMsgDatum, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.ppdata.GeoscanMsgData} returns this
 */
proto.ppdata.GeoscanMsgData.prototype.clearRowsList = function() {
  return this.setRowsList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.ppdata.GeoscanMsgDatum.prototype.toObject = function(opt_includeInstance) {
  return proto.ppdata.GeoscanMsgDatum.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.ppdata.GeoscanMsgDatum} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.GeoscanMsgDatum.toObject = function(includeInstance, msg) {
  var f, obj = {
    timestamp: jspb.Message.getFieldWithDefault(msg, 1, ""),
    rssid: jspb.Message.getFieldWithDefault(msg, 2, ""),
    bssid: jspb.Message.getFieldWithDefault(msg, 3, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.ppdata.GeoscanMsgDatum}
 */
proto.ppdata.GeoscanMsgDatum.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.ppdata.GeoscanMsgDatum;
  return proto.ppdata.GeoscanMsgDatum.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.ppdata.GeoscanMsgDatum} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.ppdata.GeoscanMsgDatum}
 */
proto.ppdata.GeoscanMsgDatum.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setTimestamp(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setRssid(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setBssid(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.ppdata.GeoscanMsgDatum.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.ppdata.GeoscanMsgDatum.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.ppdata.GeoscanMsgDatum} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.ppdata.GeoscanMsgDatum.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getTimestamp();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getRssid();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getBssid();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
};


/**
 * optional string timestamp = 1;
 * @return {string}
 */
proto.ppdata.GeoscanMsgDatum.prototype.getTimestamp = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.GeoscanMsgDatum} returns this
 */
proto.ppdata.GeoscanMsgDatum.prototype.setTimestamp = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string rssid = 2;
 * @return {string}
 */
proto.ppdata.GeoscanMsgDatum.prototype.getRssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.GeoscanMsgDatum} returns this
 */
proto.ppdata.GeoscanMsgDatum.prototype.setRssid = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string bssid = 3;
 * @return {string}
 */
proto.ppdata.GeoscanMsgDatum.prototype.getBssid = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.ppdata.GeoscanMsgDatum} returns this
 */
proto.ppdata.GeoscanMsgDatum.prototype.setBssid = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


goog.object.extend(exports, proto.ppdata);
